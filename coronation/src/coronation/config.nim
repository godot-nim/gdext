import std/[ tables, sets ]

import submodules/semanticstrings

type BuildConfig* {.requiresinit.} = object
  outdir*: string
  apisource*: string
  package*: string

type
  IgnoreConf* = object
    module*: bool
    constructor*: bool
    subscript*: bool
    constructor_white*: seq[int]

template ck(str): ContainerKey = ContainerKey "`" & str & "`"
template ts(str): TypeSym = TypeSym str

const manualImplemented* = (
  functions: toHashSet [
    ck"sin(Float)",
    ck"cos(Float)",
    ck"tan(Float)",
    ck"sinh(Float)",
    ck"cosh(Float)",
    ck"tanh(Float)",
    ck"asin(Float)",
    ck"acos(Float)",
    ck"atan(Float)",
    ck"atan2(Float Float)",
    ck"sqrt(Float)",
    ck"fmod(Float Float)",
    ck"fposmod(Float Float)",
    ck"posmod(Int Int)",
    ck"floorf(Float)",
    ck"floori(Float)",
    ck"ceilf(Float)",
    ck"ceili(Float)",
    ck"roundf(Float)",
    ck"roundi(Float)",
    ck"absf(Float)",
    ck"absi(Int)",
    ck"signf(Float)",
    ck"signi(Int)",
    ck"snappedf(Float Float)",
    ck"snappedi(Float Int)",
    ck"pow(Float Float)",
    ck"log(Float)",
    ck"exp(Float)",
    ck"isNan(Float)",
    ck"isInf(Float)",
    ck"isEqualApprox(Float Float)",
    ck"isZeroApprox(Float)",
    ck"isFinite(Float)",
    ck"wrapi(Int Int Int)",
    ck"wrapf(Float Float Float)",
    ck"maxi(Int Int)",
    ck"maxf(Float Float)",
    ck"mini(Int Int)",
    ck"minf(Float Float)",
    ck"clampi(Int Int Int)",
    ck"clampf(Float Float Float)",
    ck"hash(Variant)",

    ck"and(bool Variant)",
    ck"or(bool Variant)",
    ck"xor(bool Variant)",
    ck"not(bool)",
    ck"==(bool bool)",
    ck"!=(bool bool)",
    ck"<(bool bool)",
    ck">(bool bool)",
    ck"and(bool bool)",
    ck"or(bool bool)",
    ck"xor(bool bool)",

    ck"-(Float)",
    ck"+(Float)",
    ck"==(Float Int)",
    ck"!=(Float Int)",
    ck"<(Float Int)",
    ck"<=(Float Int)",
    ck">(Float Int)",
    ck">=(Float Int)",
    ck"+(Float Int)",
    ck"-(Float Int)",
    ck"*(Float Int)",
    ck"/(Float Int)",
    ck"==(Float Float)",
    ck"!=(Float Float)",
    ck"<(Float Float)",
    ck"<=(Float Float)",
    ck">(Float Float)",
    ck">=(Float Float)",
    ck"+(Float Float)",
    ck"-(Float Float)",
    ck"*(Float Float)",
    ck"/(Float Float)",
    ck"*(Float Vector2)",
    ck"*(Float Vector2i)",
    ck"*(Float Vector3)",
    ck"*(Float Vector3i)",
    ck"*(Float Vector4)",
    ck"*(Float Vector4i)",

    ck"-(Int)",
    ck"+(Int)",
    ck"not(Int)",
    ck"not(Int)",
    ck"==(Int Int)",
    ck"!=(Int Int)",
    ck"<(Int Int)",
    ck"<=(Int Int)",
    ck">(Int Int)",
    ck">=(Int Int)",
    ck"+(Int Int)",
    ck"-(Int Int)",
    ck"*(Int Int)",
    ck"/(Int Int)",
    ck"mod(Int Int)",
    ck"shl(Int Int)",
    ck"shr(Int Int)",
    ck"and(Int Int)",
    ck"or(Int Int)",
    ck"xor(Int Int)",
    ck"and(Int Int)",
    ck"or(Int Int)",
    ck"xor(Int Int)",
    ck"==(Int Float)",
    ck"!=(Int Float)",
    ck"<(Int Float)",
    ck"<=(Int Float)",
    ck">(Int Float)",
    ck">=(Int Float)",
    ck"+(Int Float)",
    ck"-(Int Float)",
    ck"*(Int Float)",
    ck"/(Int Float)",
    ck"*(Int Vector2)",
    ck"*(Int Vector2i)",
    ck"*(Int Vector3)",
    ck"*(Int Vector3i)",
    ck"*(Int Vector4)",
    ck"*(Int Vector4i)",

    ck"-(Vector2)",
    ck"+(Vector2)",
    ck"not(Vector2)",
    ck"*(Vector2 Int)",
    ck"/(Vector2 Int)",
    ck"*(Vector2 Float)",
    ck"/(Vector2 Float)",
    ck"==(Vector2 Vector2)",
    ck"!=(Vector2 Vector2)",
    ck"<(Vector2 Vector2)",
    ck"<=(Vector2 Vector2)",
    ck">(Vector2 Vector2)",
    ck">=(Vector2 Vector2)",
    ck"+(Vector2 Vector2)",
    ck"-(Vector2 Vector2)",
    ck"*(Vector2 Vector2)",
    ck"/(Vector2 Vector2)",
    ck"angle(Vector2)",
    ck"angleTo(Vector2 Vector2)",
    ck"angleToPoint(Vector2 Vector2)",
    ck"directionTo(Vector2 Vector2)",
    ck"distanceTo(Vector2 Vector2)",
    ck"distanceSquaredTo(Vector2 Vector2)",
    ck"length(Vector2)",
    ck"lengthSquared(Vector2)",
    ck"normalized(Vector2)",
    ck"isNormalized(Vector2)",
    ck"isEqualApprox(Vector2 Vector2)",
    ck"isZeroApprox(Vector2)",
    ck"isFinite(Vector2)",
    ck"posmod(Vector2 Float)",
    ck"posmodv(Vector2 Vector2)",
    ck"lerp(Vector2 Vector2 Float)",
    ck"maxAxisIndex(Vector2)",
    ck"minAxisIndex(Vector2)",
    ck"moveToward(Vector2 Vector2 Float)",
    ck"floor(Vector2)",
    ck"ceil(Vector2)",
    ck"round(Vector2)",
    ck"aspect(Vector2)",
    ck"dot(Vector2 Vector2)",
    ck"slide(Vector2 Vector2)",
    ck"cross(Vector2 Vector2)",
    ck"abs(Vector2)",
    ck"sign(Vector2)",
    ck"clamp(Vector2 Vector2 Vector2)",
    ck"snapped(Vector2 Vector2)",
    ck"fromAngle(Vector2 Float)",

    ck"-(Vector2i)",
    ck"+(Vector2i)",
    ck"not(Vector2i)",
    ck"*(Vector2i Int)",
    ck"/(Vector2i Int)",
    ck"mod(Vector2i Int)",
    ck"*(Vector2i Float)",
    ck"/(Vector2i Float)",
    ck"==(Vector2i Vector2i)",
    ck"!=(Vector2i Vector2i)",
    ck"<(Vector2i Vector2i)",
    ck"<=(Vector2i Vector2i)",
    ck">(Vector2i Vector2i)",
    ck">=(Vector2i Vector2i)",
    ck"+(Vector2i Vector2i)",
    ck"-(Vector2i Vector2i)",
    ck"*(Vector2i Vector2i)",
    ck"/(Vector2i Vector2i)",
    ck"mod(Vector2i Vector2i)",
    ck"aspect(Vector2i)",
    ck"maxAxisIndex(Vector2i)",
    ck"minAxisIndex(Vector2i)",
    ck"length(Vector2i)",
    ck"lengthSquared(Vector2i)",
    ck"sign(Vector2i)",
    ck"abs(Vector2i)",
    ck"clamp(Vector2i Vector2i Vector2i)",
    ck"snapped(Vector2i Vector2i)",

    ck"-(Vector3)",
    ck"+(Vector3)",
    ck"not(Vector3)",
    ck"*(Vector3 Int)",
    ck"/(Vector3 Int)",
    ck"*(Vector3 Float)",
    ck"/(Vector3 Float)",
    ck"==(Vector3 Vector3)",
    ck"!=(Vector3 Vector3)",
    ck"<(Vector3 Vector3)",
    ck"<=(Vector3 Vector3)",
    ck">(Vector3 Vector3)",
    ck">=(Vector3 Vector3)",
    ck"+(Vector3 Vector3)",
    ck"-(Vector3 Vector3)",
    ck"*(Vector3 Vector3)",
    ck"/(Vector3 Vector3)",
    ck"minAxisIndex(Vector3)",
    ck"maxAxisIndex(Vector3)",
    ck"directionTo(Vector3 Vector3)",
    ck"distanceTo(Vector3 Vector3)",
    ck"distanceSquaredTo(Vector3 Vector3)",
    ck"length(Vector3)",
    ck"lengthSquared(Vector3)",
    ck"normalized(Vector3)",
    ck"isNormalized(Vector3)",
    ck"isEqualApprox(Vector3 Vector3)",
    ck"isZeroApprox(Vector3)",
    ck"isFinite(Vector3)",
    ck"clamp(Vector3 Vector3 Vector3)",
    ck"snapped(Vector3 Vector3)",
    ck"lerp(Vector3 Vector3 Float)",
    ck"moveToward(Vector3 Vector3 Float)",
    ck"dot(Vector3 Vector3)",
    ck"abs(Vector3)",
    ck"floor(Vector3)",
    ck"ceil(Vector3)",
    ck"round(Vector3)",
    ck"posmod(Vector3 Float)",
    ck"posmodv(Vector3 Vector3)",
    ck"slide(Vector3 Vector3)",
    ck"sign(Vector3)",

    ck"-(Vector3i)",
    ck"+(Vector3i)",
    ck"not(Vector3i)",
    ck"*(Vector3i Int)",
    ck"/(Vector3i Int)",
    ck"mod(Vector3i Int)",
    ck"*(Vector3i Float)",
    ck"/(Vector3i Float)",
    ck"==(Vector3i Vector3i)",
    ck"!=(Vector3i Vector3i)",
    ck"<(Vector3i Vector3i)",
    ck"<=(Vector3i Vector3i)",
    ck">(Vector3i Vector3i)",
    ck">=(Vector3i Vector3i)",
    ck"+(Vector3i Vector3i)",
    ck"-(Vector3i Vector3i)",
    ck"*(Vector3i Vector3i)",
    ck"/(Vector3i Vector3i)",
    ck"mod(Vector3i Vector3i)",
    ck"minAxisIndex(Vector3i)",
    ck"maxAxisIndex(Vector3i)",
    ck"length(Vector3i)",
    ck"lengthSquared(Vector3i)",
    ck"sign(Vector3i)",
    ck"abs(Vector3i)",
    ck"clamp(Vector3i Vector3i Vector3i)",
    ck"snapped(Vector3i Vector3i)",

    ck"-(Vector4)",
    ck"+(Vector4)",
    ck"not(Vector4)",
    ck"*(Vector4 Int)",
    ck"/(Vector4 Int)",
    ck"*(Vector4 Float)",
    ck"/(Vector4 Float)",
    ck"==(Vector4 Vector4)",
    ck"!=(Vector4 Vector4)",
    ck"<(Vector4 Vector4)",
    ck"<=(Vector4 Vector4)",
    ck">(Vector4 Vector4)",
    ck">=(Vector4 Vector4)",
    ck"+(Vector4 Vector4)",
    ck"-(Vector4 Vector4)",
    ck"*(Vector4 Vector4)",
    ck"/(Vector4 Vector4)",
    ck"minAxisIndex(Vector4)",
    ck"maxAxisIndex(Vector4)",
    ck"length(Vector4)",
    ck"lengthSquared(Vector4)",
    ck"abs(Vector4)",
    ck"sign(Vector4)",
    ck"floor(Vector4)",
    ck"ceil(Vector4)",
    ck"round(Vector4)",
    ck"lerp(Vector4 Vector4 Float)",
    ck"posmod(Vector4 Float)",
    ck"posmodv(Vector4 Vector4)",
    ck"snapped(Vector4 Vector4)",
    ck"clamp(Vector4 Vector4 Vector4)",
    ck"normalized(Vector4)",
    ck"isNormalized(Vector4)",
    ck"directionTo(Vector4 Vector4)",
    ck"distanceTo(Vector4 Vector4)",
    ck"distanceSquaredTo(Vector4 Vector4)",
    ck"dot(Vector4 Vector4)",
    ck"isEqualApprox(Vector4 Vector4)",
    ck"isZeroApprox(Vector4)",
    ck"isFinite(Vector4)",

    ck"-(Vector4i)",
    ck"+(Vector4i)",
    ck"not(Vector4i)",
    ck"*(Vector4i Int)",
    ck"/(Vector4i Int)",
    ck"mod(Vector4i Int)",
    ck"*(Vector4i Float)",
    ck"/(Vector4i Float)",
    ck"==(Vector4i Vector4i)",
    ck"!=(Vector4i Vector4i)",
    ck"<(Vector4i Vector4i)",
    ck"<=(Vector4i Vector4i)",
    ck">(Vector4i Vector4i)",
    ck">=(Vector4i Vector4i)",
    ck"+(Vector4i Vector4i)",
    ck"-(Vector4i Vector4i)",
    ck"*(Vector4i Vector4i)",
    ck"/(Vector4i Vector4i)",
    ck"mod(Vector4i Vector4i)",
    ck"minAxisIndex(Vector4i)",
    ck"maxAxisIndex(Vector4i)",
    ck"length(Vector4i)",
    ck"lengthSquared(Vector4i)",
    ck"sign(Vector4i)",
    ck"abs(Vector4i)",
    ck"clamp(Vector4i Vector4i Vector4i)",
    ck"snapped(Vector4i Vector4i)",

    ck"contains(String String)",

    ck"contains(StringName String)",
  ]
)

const ignoreConf: Table[TypeSym, IgnoreConf] = toTable {
  ts"Vector2": IgnoreConf(
    subscript: true,
    constructor: true,
  ),
  ts"Vector2i": IgnoreConf(
    subscript: true,
    constructor: true,
  ),
  ts"Vector3": IgnoreConf(
    subscript: true,
    constructor: true,
  ),
  ts"Vector3i": IgnoreConf(
    subscript: true,
    constructor: true,
  ),
  ts"Vector4": IgnoreConf(
    subscript: true,
    constructor: true,
  ),
  ts"Vector4i": IgnoreConf(
    subscript: true,
    constructor: true,
  ),
  ts"Quaternion": IgnoreConf(
    subscript: true,
    constructor: true,
    constructor_white: @[1, 2, 3, 4],
  ),
  ts"Color": IgnoreConf(
    subscript: true,
    constructor: true,
    constructor_white: @[5, 6],
  ),
  ts"Plane": IgnoreConf(
    constructor: true,
    constructor_white: @[1, 2, 3, 4, 5],
  ),
  ts"Basis": IgnoreConf(
    subscript: true,
  ),
  ts"Projection": IgnoreConf(
    subscript: true,
  ),
  ts"Transform2D": IgnoreConf(
    subscript: true,
  ),
  ts"bool": IgnoreConf(
    constructor: true,
  ),
  ts"Int": IgnoreConf(
    constructor: true,
  ),
  ts"Float": IgnoreConf(
    constructor: true,
  ),
  ts"Nil": IgnoreConf(
    module: true,
    constructor: true,
  ),
}

proc getignore*(ts: TypeSym): IgnoreConf = ignoreConf.getOrDefault(ts)